apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: git-windows-bios-installer
  namespace: kubevirt
spec:
  params:
    - name: repo_url
      type: string
    - name: revision
      type: string
    - description: >-
        Download URL to Windows installation ISO (English United States x64
        version is needed). You can follow e.g.
        https://www.microsoft.com/en-us/software-download/windows10ISO to get
        windows 10 iso.
      name: winImageDownloadURL
      type: string
      default: https://software.download.prss.microsoft.com/dbazure/Win10_22H2_English_x64v1.iso?t=4ac1b8c9-5512-4bfd-85fd-d0cc9a09f30e&e=1685520525&h=ab8092564cf1e41640710968f577bb5d7371a5e0bdfac7d37507fc92b155d49f
    - default: windows10-bios-autounattend-test
      description: >-
        Name of the ConfigMap containing the sysprep configuration files
        (autounattend.xml, etc.).
      name: autounattendConfigMapName
      type: string
    - default: 'quay.io/kubevirt/virtio-container-disk:v0.59.0'
      description: Reference to the containerdisk containing the virtio-win drivers ISO.
      name: virtioContainerDiskName
      type: string
    - default: windows10-desktop-large
      description: Name of the Template which is used to create the installer Template.
      name: sourceTemplateName
      type: string
    - default: openshift
      description: >-
        Namespace of the Template which is used to create the installer
        Template.
      name: sourceTemplateNamespace
      type: string
    - default: windows10-desktop-large-installer
      description: >-
        Name of the installer Template which is created. A VM created from this
        template is used to install Windows 10.
      name: installerTemplateName
      type: string
    - default: 'false'
      description: Allow to replace an already existing installer Template.
      name: allowReplaceInstallerTemplate
      type: string
    - default: win10
      description: >-
        Name of the base DataVolume which is created. Pre-installed Windows VMs
        can be created from this DataVolume.
      name: baseDvName
      type: string
    - default: kubevirt-os-images
      description: Namespace of the base DataVolume which is created.
      name: baseDvNamespace
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        name: git-clone
      workspaces:
        - name: output
          workspace: source
      params:
        - name: depth
          value: "0"
        - name: url
          value: $(params.repo_url)
        - name: revision
          value: $(params.revision)
    - name: create-configmap
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: source
      taskSpec:
        workspaces:
          - name: source
        steps:
          - name: create-configmap
            image: quay.io/openshift/origin-cli:4.14
            workingDir: $(workspaces.source.path)
            script: |
              #!/usr/bin/bash
              oc apply -f autounatted/windows10-autounattend-test.yaml -n kubevirt
    - name: copy-template
      runAfter:
        - create-configmap
      params:
        - name: sourceTemplateName
          value: $(params.sourceTemplateName)
        - name: sourceTemplateNamespace
          value: $(params.sourceTemplateNamespace)
        - name: targetTemplateName
          value: $(params.installerTemplateName)
        - name: allowReplace
          value: $(params.allowReplaceInstallerTemplate)
      taskRef:
        kind: Task
        name: copy-template
      timeout: 10m0s
    - name: modify-vm-template
      params:
        - name: templateName
          value: $(tasks.copy-template.results.name)
        - name: templateAnnotations
          value:
            - 'openshift.io/display-name: Microsoft Windows bios Installer VM'
            - 'description: Template for installing Microsoft Windows.'
        - name: deleteDatavolumeTemplate
          value: 'true'
        - name: datavolumeTemplates
          value:
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}-installcdrom"
                },
                "spec": {
                  "storage": {
                    "resources": {
                      "requests": {
                        "storage": "7Gi"
                      }
                    }
                  },
                  "source": {
                    "http": {
                      "url": "$(params.winImageDownloadURL)"
                    }
                  }
                }
              }
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}-rootdisk"
                },
                "spec": {
                  "storage": {
                    "resources": {
                      "requests": {
                        "storage": "20Gi"
                      }
                    }
                  },
                  "source": {
                    "blank": {}
                  }
                }
              }
        - name: deleteDisks
          value: 'true'
        - name: disks
          value:
            - '{"name": "installcdrom", "cdrom": {"bus": "sata"}, "bootOrder": 1}'
            - '{"name": "rootdisk", "disk": {"bus": "virtio"}, "bootOrder": 2}'
            - '{"name": "virtiocontainerdisk", "cdrom": {"bus": "sata"}}'
            - '{"name": "sysprep", "cdrom": {"bus": "sata"}}'
        - name: deleteVolumes
          value: 'true'
        - name: volumes
          value:
            - >-
              {"name": "installcdrom", "dataVolume": {"name":
              "${NAME}-installcdrom"}}
            - '{"name": "rootdisk", "dataVolume": {"name": "${NAME}-rootdisk"}}'
            - >-
              {"name": "virtiocontainerdisk", "containerDisk": {"image":
              "$(params.virtioContainerDiskName)"}}
            - >-
              {"name": "sysprep", "sysprep": {"configMap": {"name":
              "$(params.autounattendConfigMapName)"}}}
        - name: deleteTemplateParameters
          value: 'true'
        - name: templateParameters
          value:
            - >-
              {"name": "NAME", "description": "VM name", "generate":
              "expression", "from": "windows-[a-z0-9]{6}"}
      runAfter:
        - copy-template
      taskRef:
        kind: Task
        name: modify-vm-template
      timeout: 10m0s
    - name: create-vm-from-template
      params:
        - name: templateName
          value: $(tasks.modify-vm-template.results.name)
        - name: runStrategy
          value: RerunOnFailure
        - name: startVM
          value: 'true'
      runAfter:
        - modify-vm-template
      taskRef:
        kind: Task
        name: create-vm-from-template
    - name: wait-for-vmi-status
      params:
        - name: vmiName
          value: $(tasks.create-vm-from-template.results.name)
        - name: successCondition
          value: status.phase == Succeeded
        - name: failureCondition
          value: 'status.phase in (Failed, Unknown)'
      runAfter:
        - create-vm-from-template
      taskRef:
        kind: Task
        name: wait-for-vmi-status
      timeout: 2h0m0s
    - name: create-base-dv
      params:
        - name: manifest
          value: |
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              name: $(params.baseDvName)
              namespace: $(params.baseDvNamespace)
              annotations:
                cdi.kubevirt.io/storage.bind.immediate.requested: "true"
            spec:
              storage: {}
              source:
                pvc:
                  name: $(tasks.create-vm-from-template.results.name)-rootdisk
                  namespace: $(tasks.create-vm-from-template.results.namespace)
        - name: waitForSuccess
          value: 'true'
        - name: allowReplace
          value: 'true'
      runAfter:
        - wait-for-vmi-status
      taskRef:
        kind: Task
        name: modify-data-object
      timeout: 1h0m0s
  finally:
    - name: cleanup-vm
      params:
        - name: vmName
          value: $(tasks.create-vm-from-template.results.name)
        - name: delete
          value: 'true'
      taskRef:
        kind: Task
        name: cleanup-vm
      timeout: 10m0s
    - name: delete-template
      params:
        - name: templateName
          value: $(params.installerTemplateName)
        - name: templateNamespace
          value: $(tasks.modify-vm-template.results.namespace)
        - name: deleteTemplate
          value: 'true'
      taskRef:
        kind: Task
        name: modify-vm-template
  results:
    - description: Name of the created base DataVolume
      name: baseDvName
      value: $(tasks.create-base-dv.results.name)
    - description: Namespace of the created base DataVolume
      name: baseDvNamespace
      value: $(tasks.create-base-dv.results.namespace)
  resources: []
  workspaces:
    - name: source
