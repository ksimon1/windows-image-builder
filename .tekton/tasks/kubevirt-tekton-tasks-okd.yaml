---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: cleanup-vm-task
    vmNamespace.params.task.kubevirt.io/type: namespace
    secretName.params.task.kubevirt.io/type: execute-in-vm-secret
    script.params.task.kubevirt.io/type: script
    delete.params.task.kubevirt.io/type: boolean
    stop.params.task.kubevirt.io/type: boolean
    timeout.params.task.kubevirt.io/type: duration
  labels:
    task.kubevirt.io/type: cleanup-vm
    task.kubevirt.io/category: execute-in-vm
  name: cleanup-vm
spec:
  params:
    - description: Name of a VM to execute the action in.
      name: vmName
      type: string
    - description: Namespace of a VM to execute the action in. (defaults to active namespace)
      name: vmNamespace
      type: string
      default: ""
    - description: Stops the VM after executing the commands when set to true.
      name: stop
      type: string
      default: "true"
    - description: Deletes the VM after executing the commands when set to true.
      name: delete
      type: string
      default: "false"
    - description: Timeout for the command/script (includes potential VM start). The VM will be stopped or deleted accordingly once the timout expires. Should be in a 3h2m1s format.
      name: timeout
      type: string
      default: "30m"
    - description: Secret to use when connecting to a VM.
      name: secretName
      type: string
      default: "__empty__"
    - description: Command to execute in a VM.
      name: command
      type: array
      default: []
    - description: Arguments of a command.
      name: args
      type: array
      default: []
    - description: Script to execute in a VM.
      name: script
      type: string
      default: ""
  steps:
    - name: execute-in-vm
      image: "quay.io/kubevirt/tekton-task-execute-in-vm:v0.14.0"
      command:
        - entrypoint
      args:
        - '--stop'
        - $(params.stop)
        - '--delete'
        - $(params.delete)
        - '--timeout'
        - $(params.timeout)
        - '--'
        - $(params.command)
        - $(params.args)
      env:
        - name: VM_NAME
          value: $(params.vmName)
        - name: VM_NAMESPACE
          value: $(params.vmNamespace)
        - name: EXECUTE_SCRIPT
          value: $(params.script)
        - name: CONNECTION_SECRET_NAME
          value: $(params.secretName)
      volumeMounts:
        - mountPath: /data/connectionsecret/
          name: connectionsecret
          readOnly: true
  volumes:
    - name: connectionsecret
      secret:
        secretName: $(params.secretName)
        optional: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cleanup-vm-task
rules:
  - verbs:
      - get
      - list
      - watch
      - delete
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines
      - virtualmachineinstances
  - verbs:
      - update
    apiGroups:
      - subresources.kubevirt.io
    resources:
      - virtualmachines/start
      - virtualmachines/stop
      - virtualmachines/restart

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cleanup-vm-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cleanup-vm-task
roleRef:
  kind: Role
  name: cleanup-vm-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: cleanup-vm-task
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/deprecated: "true"
    task.kubevirt.io/associatedServiceAccount: copy-template-task
    sourceTemplateName.params.task.kubevirt.io/kind: Template
    sourceTemplateName.params.task.kubevirt.io/apiVersion: template.openshift.io/v1
    sourceTemplateNamespace.params.task.kubevirt.io/type: namespace
    targetTemplateName.params.task.kubevirt.io/kind: Template
    targetTemplateName.params.task.kubevirt.io/apiVersion: template.openshift.io/v1
    targetTemplateNamespace.params.task.kubevirt.io/type: namespace
    allowReplace.params.task.kubevirt.io/type: boolean
  labels:
    task.kubevirt.io/type: copy-template
    task.kubevirt.io/category: copy-template
  name: copy-template
spec:
  params:
    - name: sourceTemplateName
      description: Name of an OpenShift template to copy template from.
      type: string
    - name: sourceTemplateNamespace
      description: Namespace of an source OpenShift template to copy template from. (defaults to active namespace)
      type: string
      default: ""
    - name: targetTemplateName
      description: Name of an target OpenShift template.
      type: string
      default: ""
    - name: targetTemplateNamespace
      description: Namespace of an target OpenShift template to create in. (defaults to active namespace)
      type: string
      default: ""
    - name: allowReplace
      description: Allow replacing already existing template (same combination name/namespace). Allowed values true/false
      type: string
      default: "false"
  results:
    - name: name
      description: The name of a template that was created.
    - name: namespace
      description: The namespace of a template that was created.
  steps:
    - name: copytemplate
      image: "quay.io/kubevirt/tekton-task-copy-template:v0.14.0"
      command:
        - copy-template
      args:
        - "--output=yaml"
      env:
        - name: SOURCE_TEMPLATE_NAME
          value: $(params.sourceTemplateName)
        - name: SOURCE_TEMPLATE_NAMESPACE
          value: $(params.sourceTemplateNamespace)
        - name: TARGET_TEMPLATE_NAME
          value: $(params.targetTemplateName)
        - name: TARGET_TEMPLATE_NAMESPACE
          value: $(params.targetTemplateNamespace)
        - name: ALLOW_REPLACE
          value: $(params.allowReplace)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: copy-template-task
rules:
  - verbs:
      - get
      - list
      - watch
      - create
      - update
    apiGroups:
      - template.openshift.io
    resources:
      - templates

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: copy-template-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: copy-template-task
roleRef:
  kind: Role
  name: copy-template-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: copy-template-task
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: create-vm-from-manifest-task
    manifest.params.task.kubevirt.io/type: resource-yaml
    manifest.params.task.kubevirt.io/kind: VirtualMachine
    manifest.params.task.kubevirt.io/apiVersion: kubevirt.io/v1
    namespace.params.task.kubevirt.io/type: namespace
    dataVolumes.params.task.kubevirt.io/kind: DataVolume
    dataVolumes.params.task.kubevirt.io/apiVersion: cdi.kubevirt.io/v1beta1
    ownDataVolumes.params.task.kubevirt.io/kind: DataVolume
    ownDataVolumes.params.task.kubevirt.io/apiVersion: cdi.kubevirt.io/v1beta1
    persistentVolumeClaims.params.task.kubevirt.io/kind: PersistentVolumeClaim
    persistentVolumeClaims.params.task.kubevirt.io/apiVersion: v1
    ownPersistentVolumeClaims.params.task.kubevirt.io/kind: PersistentVolumeClaim
    ownPersistentVolumeClaims.params.task.kubevirt.io/apiVersion: v1
    startVM.params.task.kubevirt.io/type: boolean
  labels:
    task.kubevirt.io/type: create-vm-from-manifest
    task.kubevirt.io/category: create-vm
  name: create-vm-from-manifest
spec:
  params:
    - name: manifest
      description: YAML manifest of a VirtualMachine resource to be created.
      type: string
    - name: namespace
      description: Namespace where to create the VM. (defaults to manifest namespace or active namespace)
      default: ""
      type: string
    - name: startVM
      description: Set to true or false to start / not start vm after creation. In case of runStrategy is set to Always, startVM flag is ignored.
      default: ""
      type: string
    - name: runStrategy
      description: Set runStrategy to VM. If runStrategy is set, vm.spec.running attribute is set to nil.
      default: ""
      type: string
    - name: dataVolumes
      description: Add DVs to VM Volumes. Replaces a particular volume if in VOLUME_NAME:DV_NAME format. Eg. ["rootdisk:my-dv", "my-dv2"]
      default: []
      type: array
    - name: ownDataVolumes
      description: Add DVs to VM Volumes and add VM to DV ownerReferences. These DataVolumes will be deleted once the created VM gets deleted. Replaces a particular volume if in VOLUME_NAME:DV_NAME format. Eg. ["rootdisk:my-dv", "my-dv2"]
      default: []
      type: array
    - name: persistentVolumeClaims
      description: Add PVCs to VM Volumes. Replaces a particular volume if in VOLUME_NAME:PVC_NAME format. Eg. ["rootdisk:my-pvc", "my-pvc2"]
      default: []
      type: array
    - name: ownPersistentVolumeClaims
      description: Add PVCs to VM Volumes and add VM to PVC ownerReferences. These PVCs will be deleted once the created VM gets deleted. Replaces a particular volume if in VOLUME_NAME:PVC_NAME format. Eg. ["rootdisk:my-pvc", "my-pvc2"]
      default: []
      type: array
  results:
    - name: name
      description: The name of a VM that was created.
    - name: namespace
      description: The namespace of a VM that was created.
  steps:
    - name: createvm
      image: "quay.io/kubevirt/tekton-task-create-vm:v0.14.0"
      command:
        - create-vm
      args:
        - "--output=yaml"
        - '--dvs'
        - $(params.dataVolumes)
        - '--own-dvs'
        - $(params.ownDataVolumes)
        - '--pvcs'
        - $(params.persistentVolumeClaims)
        - '--own-pvcs'
        - $(params.ownPersistentVolumeClaims)
      env:
        - name: VM_MANIFEST
          value: $(params.manifest)
        - name: VM_NAMESPACE
          value: $(params.namespace)
        - name: START_VM
          value: $(params.startVM)
        - name: RUN_STRATEGY
          value: $(params.runStrategy)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: create-vm-from-manifest-task
rules:
  - verbs:
      - get
      - list
      - watch
      - create
      - update
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines
      - virtualmachineinstances
  - verbs:
      - 'update'
    apiGroups:
      - subresources.kubevirt.io
    resources:
      - virtualmachines/start
  - verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
    apiGroups:
      - ''
    resources:
      - persistentvolumeclaims
  - verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
    apiGroups:
      - cdi.kubevirt.io
    resources:
      - datavolumes

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: create-vm-from-manifest-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: create-vm-from-manifest-task
roleRef:
  kind: Role
  name: create-vm-from-manifest-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: create-vm-from-manifest-task
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: create-vm-from-template-task
    tekton.dev/deprecated: "true"
    templateName.params.task.kubevirt.io/type: vm-template-name
    templateName.params.task.kubevirt.io/kind: Template
    templateName.params.task.kubevirt.io/apiVersion: template.openshift.io/v1
    templateNamespace.params.task.kubevirt.io/type: namespace
    templateParams.params.task.kubevirt.io/type: template-params-array
    vmNamespace.params.task.kubevirt.io/type: namespace
    dataVolumes.params.task.kubevirt.io/kind: DataVolume
    dataVolumes.params.task.kubevirt.io/apiVersion: cdi.kubevirt.io/v1beta1
    ownDataVolumes.params.task.kubevirt.io/kind: DataVolume
    ownDataVolumes.params.task.kubevirt.io/apiVersion: cdi.kubevirt.io/v1beta1
    persistentVolumeClaims.params.task.kubevirt.io/kind: PersistentVolumeClaim
    persistentVolumeClaims.params.task.kubevirt.io/apiVersion: v1
    ownPersistentVolumeClaims.params.task.kubevirt.io/kind: PersistentVolumeClaim
    ownPersistentVolumeClaims.params.task.kubevirt.io/apiVersion: v1
    startVM.params.task.kubevirt.io/type: boolean
  labels:
    task.kubevirt.io/type: create-vm-from-template
    task.kubevirt.io/category: create-vm
  name: create-vm-from-template
spec:
  params:
    - name: templateName
      description: Name of an OKD template to create VM from.
      type: string
    - name: templateNamespace
      description: Namespace of an OKD template to create VM from. (defaults to active namespace)
      default: ""
      type: string
    - name: templateParams
      description: Template params to pass when processing the template manifest. Each param should have KEY:VAL format. Eg ["NAME:my-vm", "DESC:blue"]
      default: []
      type: array
    - name: vmNamespace
      description: Namespace where to create the VM. (defaults to active namespace)
      default: ""
      type: string
    - name: startVM
      description: Set to true or false to start / not start vm after creation. In case of runStrategy is set to Always, startVM flag is ignored.
      default: ""
      type: string
    - name: runStrategy
      description: Set runStrategy to VM. If runStrategy is set, vm.spec.running attribute is set to nil.
      default: ""
      type: string
    - name: dataVolumes
      description: Add DVs to VM Volumes. Replaces a particular volume if in VOLUME_NAME:DV_NAME format. Eg. ["rootdisk:my-dv", "my-dv2"]
      default: []
      type: array
    - name: ownDataVolumes
      description: Add DVs to VM Volumes and add VM to DV ownerReferences. These DataVolumes will be deleted once the created VM gets deleted. Replaces a particular volume if in VOLUME_NAME:DV_NAME format. Eg. ["rootdisk:my-dv", "my-dv2"]
      default: []
      type: array
    - name: persistentVolumeClaims
      description: Add PVCs to VM Volumes. Replaces a particular volume if in VOLUME_NAME:PVC_NAME format. Eg. ["rootdisk:my-pvc", "my-pvc2"]
      default: []
      type: array
    - name: ownPersistentVolumeClaims
      description: Add PVCs to VM Volumes and add VM to PVC ownerReferences. These PVCs will be deleted once the created VM gets deleted. Replaces a particular volume if in VOLUME_NAME:PVC_NAME format. Eg. ["rootdisk:my-pvc", "my-pvc2"]
      default: []
      type: array
  results:
    - name: name
      description: The name of a VM that was created.
    - name: namespace
      description: The namespace of a VM that was created.
  steps:
    - name: createvm
      image: "quay.io/kubevirt/tekton-task-create-vm:v0.14.0"
      command:
        - create-vm
      args:
        - "--output=yaml"
        - '--dvs'
        - $(params.dataVolumes)
        - '--own-dvs'
        - $(params.ownDataVolumes)
        - '--pvcs'
        - $(params.persistentVolumeClaims)
        - '--own-pvcs'
        - $(params.ownPersistentVolumeClaims)
        - '--template-params'
        - $(params.templateParams)
      env:
        - name: TEMPLATE_NAME
          value: $(params.templateName)
        - name: TEMPLATE_NAMESPACE
          value: $(params.templateNamespace)
        - name: VM_NAMESPACE
          value: $(params.vmNamespace)
        - name: START_VM
          value: $(params.startVM)
        - name: RUN_STRATEGY
          value: $(params.runStrategy)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: create-vm-from-template-task
rules:
  - verbs:
      - get
      - list
      - watch
      - create
      - update
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines
      - virtualmachineinstances
  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - template.openshift.io
    resources:
      - templates
  - verbs:
      - create
    apiGroups:
      - template.openshift.io
    resources:
      - processedtemplates
  - verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
    apiGroups:
      - ''
    resources:
      - persistentvolumeclaims
  - verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
    apiGroups:
      - cdi.kubevirt.io
    resources:
      - datavolumes
  - verbs:
      - 'update'
    apiGroups:
      - subresources.kubevirt.io
    resources:
      - virtualmachines/start

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: create-vm-from-template-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: create-vm-from-template-task
roleRef:
  kind: Role
  name: create-vm-from-template-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: create-vm-from-template-task
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    pvc.params.task.kubevirt.io/kind: PersistentVolumeClaim
    pvc.params.task.kubevirt.io/apiVersion: v1
    customizeCommands.params.task.kubevirt.io/type: script
    verbose.params.task.kubevirt.io/type: boolean
  labels:
    task.kubevirt.io/type: disk-virt-customize
    task.kubevirt.io/category: disk-virt-customize
  name: disk-virt-customize
spec:
  params:
    - name: pvc
      description: PersistentVolumeClaim to run the the virt-customize script in. PVC should be in the same namespace as taskrun/pipelinerun.
      type: string
    - name: customizeCommands
      description: virt-customize commands in "--commands-from-file" format.
      type: string
      default: ""
    - name: verbose
      description: Enable verbose mode and tracing of libguestfs API calls.
      type: string
      default: 'false'
    - name: additionalOptions
      description: Additional options to pass to virt-customize.
      type: string
      default: ""
  steps:
    - name: run-virt-customize
      image: "quay.io/kubevirt/tekton-task-disk-virt-customize:v0.14.0"
      command:
        - entrypoint
      args:
        - '--verbose'
        - $(params.verbose)
      env:
        - name: CUSTOMIZE_COMMANDS
          value: $(params.customizeCommands)
        - name: ADDITIONAL_VIRT_CUSTOMIZE_OPTIONS
          value: $(params.additionalOptions)
        - name: LIBGUESTFS_BACKEND
          value: direct
      resources:
        limits:
          devices.kubevirt.io/kvm: '1'
          devices.kubevirt.io/tun: '1'
          devices.kubevirt.io/vhost-net: '1'
        requests:
          devices.kubevirt.io/kvm: '1'
          devices.kubevirt.io/tun: '1'
          devices.kubevirt.io/vhost-net: '1'
      volumeMounts:
        - mountPath: /mnt/appliance/
          name: guestfsappliance
        - mountPath: /mnt/targetpvc/
          name: targetpvc
  volumes:
    - name: guestfsappliance
      emptyDir: {}
    - name: targetpvc
      persistentVolumeClaim:
        claimName: $(params.pvc)
  workspaces:
    - name: data01
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data01
    - name: data02
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data02
    - name: data03
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data03
    - name: data04
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data04
    - name: data05
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data05
    - name: data06
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data06
    - name: data07
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data07
    - name: data08
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data08
    - name: data09
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data09
    - name: data10
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data10
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    pvc.params.task.kubevirt.io/kind: PersistentVolumeClaim
    pvc.params.task.kubevirt.io/apiVersion: v1
    sysprepCommands.params.task.kubevirt.io/type: script
    verbose.params.task.kubevirt.io/type: boolean
  labels:
    task.kubevirt.io/type: disk-virt-sysprep
    task.kubevirt.io/category: disk-virt-sysprep
  name: disk-virt-sysprep
spec:
  params:
    - name: pvc
      description: PersistentVolumeClaim to run the the virt-sysprep script in. PVC should be in the same namespace as taskrun/pipelinerun.
      type: string
    - name: sysprepCommands
      description: virt-sysprep commands in "--commands-from-file" format.
      type: string
      default: ""
    - name: verbose
      description: Enable verbose mode and tracing of libguestfs API calls.
      type: string
      default: 'false'
    - name: additionalOptions
      description: Additional options to pass to virt-sysprep.
      type: string
      default: ""
  steps:
    - name: run-virt-sysprep
      image: "quay.io/kubevirt/tekton-task-disk-virt-sysprep:v0.14.0"
      command:
        - entrypoint
      args:
        - '--verbose'
        - $(params.verbose)
      env:
        - name: SYSPREP_COMMANDS
          value: $(params.sysprepCommands)
        - name: ADDITIONAL_VIRT_SYSPREP_OPTIONS
          value: $(params.additionalOptions)
        - name: LIBGUESTFS_BACKEND
          value: direct
      resources:
        limits:
          devices.kubevirt.io/kvm: '1'
          devices.kubevirt.io/tun: '1'
          devices.kubevirt.io/vhost-net: '1'
        requests:
          devices.kubevirt.io/kvm: '1'
          devices.kubevirt.io/tun: '1'
          devices.kubevirt.io/vhost-net: '1'
      volumeMounts:
        - mountPath: /mnt/appliance/
          name: guestfsappliance
        - mountPath: /mnt/targetpvc/
          name: targetpvc
  volumes:
    - name: guestfsappliance
      emptyDir: {}
    - name: targetpvc
      persistentVolumeClaim:
        claimName: $(params.pvc)
  workspaces:
    - name: data01
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data01
    - name: data02
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data02
    - name: data03
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data03
    - name: data04
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data04
    - name: data05
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data05
    - name: data06
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data06
    - name: data07
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data07
    - name: data08
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data08
    - name: data09
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data09
    - name: data10
      description: |
        An optional workspace that may contain files or secrets to be
        used during the virt-customize run.
      optional: true
      mountPath: /data10
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: execute-in-vm-task
    vmNamespace.params.task.kubevirt.io/type: namespace
    secretName.params.task.kubevirt.io/type: execute-in-vm-secret
    script.params.task.kubevirt.io/type: script
  labels:
    task.kubevirt.io/type: execute-in-vm
    task.kubevirt.io/category: execute-in-vm
  name: execute-in-vm
spec:
  params:
    - description: Name of a VM to execute the action in.
      name: vmName
      type: string
    - description: Namespace of a VM to execute the action in. (defaults to active namespace)
      name: vmNamespace
      type: string
      default: ""
    - description: Secret to use when connecting to a VM.
      name: secretName
      type: string
      default: "__empty__"
    - description: Command to execute in a VM.
      name: command
      type: array
      default: []
    - description: Arguments of a command.
      name: args
      type: array
      default: []
    - description: Script to execute in a VM.
      name: script
      type: string
      default: ""
  steps:
    - name: execute-in-vm
      image: "quay.io/kubevirt/tekton-task-execute-in-vm:v0.14.0"
      command:
        - entrypoint
      args:
        - '--'
        - $(params.command)
        - $(params.args)
      env:
        - name: VM_NAME
          value: $(params.vmName)
        - name: VM_NAMESPACE
          value: $(params.vmNamespace)
        - name: EXECUTE_SCRIPT
          value: $(params.script)
        - name: CONNECTION_SECRET_NAME
          value: $(params.secretName)
      volumeMounts:
        - mountPath: /data/connectionsecret/
          name: connectionsecret
          readOnly: true
  volumes:
    - name: connectionsecret
      secret:
        secretName: $(params.secretName)
        optional: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: execute-in-vm-task
rules:
  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines
      - virtualmachineinstances
  - verbs:
      - update
    apiGroups:
      - subresources.kubevirt.io
    resources:
      - virtualmachines/start
      - virtualmachines/stop
      - virtualmachines/restart

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: execute-in-vm-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: execute-in-vm-task
roleRef:
  kind: Role
  name: execute-in-vm-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: execute-in-vm-task
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: generate-ssh-keys-task
    publicKeySecretName.params.task.kubevirt.io/kind: Secret
    publicKeySecretName.params.task.kubevirt.io/apiVersion: v1
    publicKeySecretNamespace.params.task.kubevirt.io/type: namespace
    privateKeySecretName.params.task.kubevirt.io/kind: Secret
    privateKeySecretName.params.task.kubevirt.io/apiVersion: v1
    privateKeySecretNamespace.params.task.kubevirt.io/type: namespace
    privateKeyConnectionOptions.params.task.kubevirt.io/type: private-key-options-array
  labels:
    task.kubevirt.io/type: generate-ssh-keys
    task.kubevirt.io/category: generate-ssh-keys
  name: generate-ssh-keys
spec:
  params:
    - name: publicKeySecretName
      description: Name of a new or existing secret to append the generated public key to. The name will be generated and new secret created if not specified.
      default: ""
      type: string
    - name: publicKeySecretNamespace
      description: Namespace of publicKeySecretName. (defaults to active namespace)
      default: ""
      type: string
    - name: privateKeySecretName
      description: Name of a new secret to add the generated private key to. The name will be generated if not specified. The secret uses format of execute-in-vm task.
      default: ""
      type: string
    - name: privateKeySecretNamespace
      description: Namespace of privateKeySecretName. (defaults to active namespace)
      default: ""
      type: string
    - name: privateKeyConnectionOptions
      description: Additional options to use in SSH client. Please see execute-in-vm task SSH section for more details. Eg ["host-public-key:ssh-rsa AAAAB...", "additional-ssh-options:-p 8022"].
      default: []
      type: array
    - name: additionalSSHKeygenOptions
      description: Additional options to pass to the ssh-keygen command.
      default: ""
      type: string
  results:
    - name: publicKeySecretName
      description: The name of a public key secret.
    - name: publicKeySecretNamespace
      description: The namespace of a public key secret.
    - name: privateKeySecretName
      description: The name of a private key secret.
    - name: privateKeySecretNamespace
      description: The namespace of a private key secret.
  steps:
    - name: generate-ssh-keys
      image: "quay.io/kubevirt/tekton-task-generate-ssh-keys:v0.14.0"
      command:
        - entrypoint
        - '--'
        - $(params.privateKeyConnectionOptions)
      env:
        - name: PUBLIC_KEY_SECRET_NAME
          value: $(params.publicKeySecretName)
        - name: PUBLIC_KEY_SECRET_NAMESPACE
          value: $(params.publicKeySecretNamespace)
        - name: PRIVATE_KEY_SECRET_NAME
          value: $(params.privateKeySecretName)
        - name: PRIVATE_KEY_SECRET_NAMESPACE
          value: $(params.privateKeySecretNamespace)
        - name: ADDITIONAL_SSH_KEYGEN_OPTIONS
          value: $(params.additionalSSHKeygenOptions)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: generate-ssh-keys-task
rules:
  - verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
    apiGroups:
      - ''
    resources:
      - secrets

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: generate-ssh-keys-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: generate-ssh-keys-task
roleRef:
  kind: Role
  name: generate-ssh-keys-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: generate-ssh-keys-task
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: modify-data-object-task
    manifest.params.task.kubevirt.io/type: resource-yaml
    manifest.params.task.kubevirt.io/apiVersion: cdi.kubevirt.io/v1beta1
    waitForSuccess.params.task.kubevirt.io/type: boolean
  labels:
    task.kubevirt.io/type: modify-data-object
    task.kubevirt.io/category: modify-data-object
  name: modify-data-object
spec:
  description: >-
    This task modifies a data object (DataVolume or DataSource). It can optionally wait until CDI imports finish.
  params:
    - name: manifest
      description: YAML manifest of a data object to be created.
      type: string
      default: ''
    - name: namespace
      description: Namespace where to create the data object. (defaults to manifest namespace or active namespace)
      default: ""
      type: string
    - name: waitForSuccess
      description: Set to "true" or "false" if container should wait for Ready condition of the data object.
      default: 'false'
      type: string
    - name: allowReplace
      description: Allow replacing an already existing data object (same combination name/namespace). Allowed values true/false
      type: string
      default: "false"
    - name: deleteObject
      description: Set to `true` or `false` if task should delete the specified DataVolume, DataSource or PersistentVolumeClaim. If set to 'true' the ds/dv/pvc will be deleted and all other parameters are ignored.
      default: 'false'
      type: string
    - name: deleteObjectKind
      description: Kind of the data object to delete. This parameter is used only for Delete operation.
      default: ""
      type: string
    - name: deleteObjectName
      description: Name of the data object to delete. This parameter is used only for Delete operation.
      default: ""
      type: string
  results:
    - name: name
      description: The name of the data object that was created.
    - name: namespace
      description: The namespace of the data object that was created.
  steps:
    - name: modify-data-object
      image: "quay.io/kubevirt/tekton-task-modify-data-object:v0.14.0"
      command:
        - modify-data-object
      args:
        - "--output=yaml"
      env:
        - name: DATA_OBJECT_MANIFEST
          value: $(params.manifest)
        - name: DATA_OBJECT_NAMESPACE
          value: $(params.namespace)
        - name: WAIT_FOR_SUCCESS
          value: $(params.waitForSuccess)
        - name: ALLOW_REPLACE
          value: $(params.allowReplace)
        - name: DELETE_OBJECT
          value: $(params.deleteObject)
        - name: DELETE_OBJECT_KIND
          value: $(params.deleteObjectKind)
        - name: DELETE_OBJECT_NAME
          value: $(params.deleteObjectName)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: modify-data-object-task
rules:
  - verbs:
      - get
      - create
      - delete
    apiGroups:
      - cdi.kubevirt.io
    resources:
      - datavolumes
  - verbs:
      - create
    apiGroups:
      - ""
    resources:
      - pods
  - verbs:
      - get
      - delete
    apiGroups:
      - ""
    resources:
      - persistentvolumeclaims

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: modify-data-object-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: modify-data-object-task
roleRef:
  kind: Role
  name: modify-data-object-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: modify-data-object-task
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/deprecated: "true"
    task.kubevirt.io/associatedServiceAccount: modify-vm-template-task
    templateName.params.task.kubevirt.io/kind: Template
    templateName.params.task.kubevirt.io/apiVersion: template.openshift.io/v1
    templateNamespace.params.task.kubevirt.io/kind: namespace
    cpuSockets.params.task.kubevirt.io/type: number
    cpuCores.params.task.kubevirt.io/type: number
    cpuThreads.params.task.kubevirt.io/type: number
    memory.params.task.kubevirt.io/type: memory
    deleteDatavolumeTemplate.params.task.kubevirt.io/type: boolean
    deleteTemplateParameters.params.task.kubevirt.io/type: boolean
    deleteTemplate.params.task.kubevirt.io/type: boolean
  labels:
    task.kubevirt.io/type: modify-vm-template
    task.kubevirt.io/category: modify-vm-template
  name: modify-vm-template
spec:
  params:
    - name: templateName
      description: Name of an OpenShift template.
      type: string
    - name: templateNamespace
      description: Namespace of an source OpenShift template. (defaults to active namespace)
      type: string
      default: ""
    - name: cpuSockets
      description: Number of CPU sockets
      type: string
      default: "0"
    - name: cpuCores
      description: Number of CPU cores
      type: string
      default: "0"
    - name: cpuThreads
      description: Number of CPU threads
      type: string
      default: "0"
    - name: memory
      description: Number of memory vm can use
      type: string
      default: ""
    - description: Template labels. If template contains same label, it will be replaced. Each param should have KEY:VAL format. Eg ["key:value", "key:value"].
      name: templateLabels
      type: array
      default: []
    - description: Template Annotations. If template contains same annotation, it will be replaced. Each param should have KEY:VAL format. Eg ["key:value", "key:value"]
      name: templateAnnotations
      type: array
      default: []
    - description: VM labels. If VM contains same label, it will be replaced. Each param should have KEY:VAL format. Eg ["key:value", "key:value"].
      name: vmLabels
      type: array
      default: []
    - description: VM annotations. If VM contains same annotation, it will be replaced. Each param should have KEY:VAL format. Eg ["key:value", "key:value"].
      name: vmAnnotations
      type: array
      default: []
    - description: 'VM disks in json format, replace vm disk if same name, otherwise new disk is appended. Eg [{"name": "test", "cdrom": {"bus": "sata"}}, {"name": "disk2"}]'
      name: disks
      type: array
      default: []
    - name: deleteDisks
      description: Set to "true" or "false" if task should delete VM disks. New disks (from disks parameter) are applied, after old disks are deleted.
      default: 'false'
      type: string
    - description: 'VM volumes in json format, replace vm volume if same name, otherwise new volume is appended. Eg [{"name": "virtiocontainerdisk", "containerDisk": {"image": "kubevirt/virtio-container-disk"}}]'
      name: volumes
      type: array
      default: []
    - description: 'Datavolume templates in json format, replace datavolume if same name, otherwise new datavolume is appended. If deleteDatavolumeTemplate is set, first datavolumes are deleted and then datavolumes from this attribute are added. Eg [{"apiVersion": "cdi.kubevirt.io/v1beta1", "kind": "DataVolume", "metadata":{"name": "test1"}, "spec": {"source": {"http": {"url": "test.somenonexisting"}}}}]'
      name: datavolumeTemplates
      type: array
      default: []
    - name: deleteDatavolumeTemplate
      description: Set to "true" or "false" if task should delete datavolume template in template and all associated volumes and disks.
      default: 'false'
      type: string
    - name: deleteVolumes
      description: Set to "true" or "false" if task should delete VM volumes. New volumes (from volumes parameter) are applied, after old volumes are deleted.
      default: 'false'
      type: string
    - name: templateParameters
      description: 'Definition of template parameters. Eg [{"description": "VM name", "name": "NAME"}]'
      default: []
      type: array
    - name: deleteTemplateParameters
      description: Set to "true" or "false" if task should delete template parameters. New parameters (from templateParameters parameter) are applied, after old parameters are deleted.
      default: 'false'
      type: string
    - name: deleteTemplate
      description: Set to `true` or `false` if task should delete the specified template. If set to 'true' the template will be deleted and all other parameters are ignored.
      default: 'false'
      type: string

  results:
    - name: name
      description: The name of a template that was updated.
    - name: namespace
      description: The namespace of a template that was updated.
  steps:
    - name: modifyvmtemplate
      image: "quay.io/kubevirt/tekton-task-modify-vm-template:v0.14.0"
      command:
        - modify-vm-template
      args:
        - "--output=yaml"
        - "--template-labels"
        - $(params.templateLabels)
        - "--template-annotations"
        - $(params.templateAnnotations)
        - "--vm-labels"
        - $(params.vmLabels)
        - "--vm-annotations"
        - $(params.vmAnnotations)
        - "--disks"
        - $(params.disks)
        - "--volumes"
        - $(params.volumes)
        - "--datavolumeTemplates"
        - $(params.datavolumeTemplates)
        - "--templateParameters"
        - $(params.templateParameters)
      env:
        - name: TEMPLATE_NAME
          value: $(params.templateName)
        - name: TEMPLATE_NAMESPACE
          value: $(params.templateNamespace)
        - name: CPU_SOCKETS
          value: $(params.cpuSockets)
        - name: CPU_CORES
          value: $(params.cpuCores)
        - name: CPU_THREADS
          value: $(params.cpuThreads)
        - name: MEMORY
          value: $(params.memory)
        - name: DELETE_DATAVOLUME_TEMPLATE
          value: $(params.deleteDatavolumeTemplate)
        - name: DELETE_DISKS
          value: $(params.deleteDisks)
        - name: DELETE_VOLUMES
          value: $(params.deleteVolumes)
        - name: DELETE_TEMPLATE_PARAMETERS
          value: $(params.deleteTemplateParameters)
        - name: DELETE_TEMPLATE
          value: $(params.deleteTemplate)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: modify-vm-template-task
rules:
  - verbs:
      - get
      - list
      - patch
      - delete
    apiGroups:
      - template.openshift.io
    resources:
      - templates

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: modify-vm-template-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: modify-vm-template-task
roleRef:
  kind: Role
  name: modify-vm-template-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: modify-vm-template-task
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: modify-windows-iso-file-task
  labels:
    task.kubevirt.io/type: modify-windows-iso-file
    task.kubevirt.io/category: modify-windows-iso-file
  name: modify-windows-iso-file
spec:
  params:
    - name: pvcName
      description: PersistentVolumeClaim which contains windows iso.
      type: string
      default: ""
  steps:
    - name: modify-iso-file
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - "ALL"
      image: "quay.io/kubevirt/tekton-task-disk-virt-customize:v0.14.0"
      script: |
        #!/bin/bash
        set -x

        export LIBGUESTFS_PATH=/usr/local/lib/guestfs/appliance
        export ISO_FILES_PATH="/tmp/extracted-iso-files"
        export EFI_BOOT="${ISO_FILES_PATH}/efi/microsoft/boot"
        export TARGET_IMG_FILE_PATH="tmp/target-pvc/disk.img"

        guestfish -a ${TARGET_IMG_FILE_PATH} -m /dev/sda tar-out / - | tar xvf - -C ${ISO_FILES_PATH} -m --no-overwrite-dir --owner=$(id -u) --group=$(id -g) --no-same-permissions
 
        chmod u+w "${ISO_FILES_PATH}/efi" "${ISO_FILES_PATH}/efi/microsoft" "${ISO_FILES_PATH}/efi/microsoft/boot"
        chmod u+w "${EFI_BOOT}/efisys.bin" "${EFI_BOOT}/cdboot.efi" "${EFI_BOOT}/efisys_noprompt.bin" "${EFI_BOOT}/cdboot_noprompt.efi"

        rm "${EFI_BOOT}/efisys.bin" "${EFI_BOOT}/cdboot.efi"

        mv "${EFI_BOOT}/efisys_noprompt.bin" "${EFI_BOOT}/efisys.bin"
        mv "${EFI_BOOT}/cdboot_noprompt.efi" "${EFI_BOOT}/cdboot.efi"
      env:
        - name: "LIBGUESTFS_BACKEND"
          value: "direct"
        - name: "HOME"
          value: "/usr/local/lib/guestfs/appliance"
      resources:
        limits:
          devices.kubevirt.io/kvm: '1'
        requests:
          devices.kubevirt.io/kvm: '1'
      volumeMounts:
        - mountPath: /tmp/target-pvc/
          name: target-pvc
        - mountPath: /tmp/extracted-iso-files/
          name: extracted-iso-files
    - name: create-iso-file
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - "ALL"
      image: "quay.io/kubevirt/tekton-task-modify-data-object:v0.14.0"
      script: |
        #!/bin/bash
        set -ex
        export ISO_FILES_PATH="/tmp/extracted-iso-files"
        export ISO_FILE_PATH="/tmp/iso-file/disk.iso"

        xorriso -as mkisofs -no-emul-boot \
            -e "efi/microsoft/boot/efisys.bin" \
            -boot-load-size 1 \
            -iso-level 4 \
            -J -l -D -N \
            -joliet-long \
            -relaxed-filenames \
            -V "WINDOWS" \
            -o ${ISO_FILE_PATH} ${ISO_FILES_PATH}
      volumeMounts:
        - mountPath: /tmp/extracted-iso-files/
          name: extracted-iso-files
        - mountPath: /tmp/iso-file/
          name: iso-file
    - name: convert-iso-file
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - "ALL"
      image: "quay.io/kubevirt/tekton-task-disk-virt-customize:v0.14.0"
      script: |
        #!/bin/bash
        set -x
        export ISO_FILE_PATH="/tmp/iso-file/disk.iso"
        export TARGET_IMG_FILE_PATH="/tmp/target-pvc/disk.img"

        rm ${TARGET_IMG_FILE_PATH}
        qemu-img convert -t writeback -p -O raw ${ISO_FILE_PATH} ${TARGET_IMG_FILE_PATH}
      volumeMounts:
        - mountPath: /tmp/target-pvc/
          name: target-pvc
        - mountPath: /tmp/iso-file/
          name: iso-file
  volumes:
    - name: target-pvc
      persistentVolumeClaim:
        claimName: "$(params.pvcName)"
    - name: extracted-iso-files
      emptyDir:
        sizeLimit: 12Gi
    - name: iso-file
      emptyDir:
        sizeLimit: 12Gi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    task.kubevirt.io/associatedServiceAccount: wait-for-vmi-status-task
    vmiNamespace.params.task.kubevirt.io/type: namespace
  labels:
    task.kubevirt.io/type: wait-for-vmi-status
    task.kubevirt.io/category: wait-for-vmi-status
  name: wait-for-vmi-status
spec:
  params:
    - name: vmiName
      description: Name of a VirtualMachineInstance to wait for.
      type: string
    - name: vmiNamespace
      description: Namespace of a VirtualMachineInstance to wait for. (defaults to manifest namespace or active namespace)
      default: ""
      type: string
    - name: successCondition
      default: ""
      description: A label selector expression to decide if the VirtualMachineInstance (VMI) is in a success state. Eg. "status.phase == Succeeded". It is evaluated on each VMI update and will result in this task succeeding if true.
    - name: failureCondition
      default: ""
      description: A label selector expression to decide if the VirtualMachineInstance (VMI) is in a failed state. Eg. "status.phase in (Failed, Unknown)". It is evaluated on each VMI update and will result in this task failing if true.
  steps:
    - name: wait-for-vmi-status
      image: "quay.io/kubevirt/tekton-task-wait-for-vmi-status:v0.14.0"
      command:
        - entrypoint
      env:
        - name: VMI_NAME
          value: $(params.vmiName)
        - name: VMI_NAMESPACE
          value: $(params.vmiNamespace)
        - name: SUCCESS_CONDITION
          value: $(params.successCondition)
        - name: FAILURE_CONDITION
          value: $(params.failureCondition)

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: wait-for-vmi-status-task
rules:
  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachineinstances

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: wait-for-vmi-status-task

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: wait-for-vmi-status-task
roleRef:
  kind: Role
  name: wait-for-vmi-status-task
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: wait-for-vmi-status-task
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: windows10-bios-autounattend
data:
  autounattend.xml: |
    <?xml version="1.0" encoding="utf-8"?>
    <unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
      <settings pass="windowsPE">
        <component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <SetupUILanguage>
            <UILanguage>en-US</UILanguage>
          </SetupUILanguage>
          <InputLocale>0409:00000409</InputLocale>
          <SystemLocale>en-US</SystemLocale>
          <UILanguage>en-US</UILanguage>
          <UserLocale>en-US</UserLocale>
        </component>
        <component name="Microsoft-Windows-PnpCustomizationsWinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <DriverPaths>
            <PathAndCredentials wcm:action="add" wcm:keyValue="1">
              <Path>E:\viostor\w10\amd64</Path>
            </PathAndCredentials>
          </DriverPaths>
        </component>
        <component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <DiskConfiguration>
            <WillShowUI>Never</WillShowUI>
            <Disk wcm:action="add">
              <CreatePartitions>
                <!-- Windows partition -->
                <CreatePartition wcm:action="add">
                  <Order>1</Order>
                  <Type>Primary</Type>
                  <Extend>true</Extend>
                </CreatePartition>
              </CreatePartitions>
              <ModifyPartitions>
                <!-- Windows partition -->
                <ModifyPartition wcm:action="add">
                  <Order>1</Order>
                  <PartitionID>1</PartitionID>
                  <Label>OS</Label>
                  <Format>NTFS</Format>
                  <Letter>C</Letter>
                </ModifyPartition>
              </ModifyPartitions>
              <DiskID>0</DiskID>
              <WillWipeDisk>true</WillWipeDisk>
            </Disk>
          </DiskConfiguration>
          <ImageInstall>
            <OSImage>
              <InstallFrom>
                <MetaData wcm:action="add">
                  <Key>/Image/Description</Key>
                  <Value>Windows 10 Pro</Value>
                </MetaData>
              </InstallFrom>
              <InstallTo>
                <DiskID>0</DiskID>
                <PartitionID>1</PartitionID>
              </InstallTo>
            </OSImage>
          </ImageInstall>
          <UserData>
            <AcceptEula>true</AcceptEula>
            <ProductKey>
              <Key/>
            </ProductKey>
          </UserData>
        </component>
      </settings>
      <settings pass="specialize">
        <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <InputLocale>0409:00000409</InputLocale>
          <SystemLocale>en-US</SystemLocale>
          <UILanguage>en-US</UILanguage>
          <UserLocale>en-US</UserLocale>
        </component>
      </settings>
      <settings pass="oobeSystem">
        <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <Reseal>
            <Mode>Audit</Mode>
          </Reseal>
        </component>
      </settings>
      <settings pass="auditUser">
        <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <RunSynchronous>
            <RunSynchronousCommand wcm:action="add">
              <Order>1</Order>
              <Path>PowerShell -ExecutionPolicy Bypass -NoProfile F:\post-install.ps1</Path>
              <Description>Run post-install script</Description>
            </RunSynchronousCommand>
          </RunSynchronous>
          <Generalize>
            <ForceShutdownNow>true</ForceShutdownNow>
            <Mode>OOBE</Mode>
          </Generalize>
        </component>
      </settings>
    </unattend>
  post-install.ps1: |
    # Install virtio guest drivers
    # ADDLOCAL is specified to workaround a bug in virtio-win-0.1.217.iso
    # See:
    #   - https://github.com/virtio-win/virtio-win-guest-tools-installer/issues/33
    #   - https://github.com/virtio-win/virtio-win-pkg-scripts/issues/60
    Start-Process msiexec -Wait -ArgumentList "/i E:\virtio-win-gt-x64.msi /qn /passive /norestart ADDLOCAL=FE_balloon_driver,FE_network_driver,FE_vioinput_driver,FE_viorng_driver,FE_vioscsi_driver,FE_vioserial_driver,FE_viostor_driver,FE_viofs_driver,FE_viogpudo_driver"

    # Install qemu guest agent
    Start-Process msiexec -Wait -ArgumentList "/i E:\guest-agent\qemu-ga-x86_64.msi /qn /passive /norestart"

    # Rename cached unattend.xml to avoid it is picked up by sysprep
    mv C:\Windows\Panther\unattend.xml C:\Windows\Panther\unattend.install.xml

    # Eject CD, to avoid that the unattend.xml on the CD is picked up by sysprep
    (New-Object -COMObject Shell.Application).NameSpace(17).ParseName("F:").InvokeVerb("Eject")
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: windows-sqlserver
data:
  unattend.xml: |
    <?xml version="1.0" encoding="utf-8"?>
    <unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
      <settings pass="specialize">
        <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <InputLocale>0409:00000409</InputLocale>
          <SystemLocale>en-US</SystemLocale>
          <UILanguage>en-US</UILanguage>
          <UserLocale>en-US</UserLocale>
        </component>
      </settings>
      <settings pass="oobeSystem">
        <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <Reseal>
            <Mode>Audit</Mode>
          </Reseal>
        </component>
      </settings>
      <settings pass="auditUser">
        <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <RunSynchronous>
            <RunSynchronousCommand wcm:action="add">
              <Order>1</Order>
              <Path>PowerShell -ExecutionPolicy Bypass -NoProfile D:\sqlserver-install.ps1</Path>
              <Description>Run sqlserver-install script</Description>
            </RunSynchronousCommand>
          </RunSynchronous>
          <Generalize>
            <ForceShutdownNow>true</ForceShutdownNow>
            <Mode>OOBE</Mode>
          </Generalize>
        </component>
      </settings>
    </unattend>
  sqlserver-install.ps1: |
    #https://github.com/kubevirt/user-guide/pull/645
    Set-NetIPInterface -InterfaceIndex $(Get-NetAdapter).ifIndex -NlMtuBytes 1300

    # Download SQL server
    $url = "https://go.microsoft.com/fwlink/?linkid=866658"
    $setupPath = "C:\SQL2019-SSEI-Expr.exe"
    Invoke-WebRequest -Uri $url -OutFile $setupPath

    # Install SQL server
    Start-Process $setupPath -Wait -ArgumentList "/ACTION=INSTALL /IACCEPTSQLSERVERLICENSETERMS /QUIET"

    # Rename cached unattend.xml to avoid it is picked up by sysprep
    mv C:\Windows\Panther\unattend.xml C:\Windows\Panther\unattend.sqlserver.xml

    # Eject CD, to avoid that the unattend.xml on the CD is picked up by sysprep
    (New-Object -COMObject Shell.Application).NameSpace(17).ParseName("D:").InvokeVerb("Eject")
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: windows-vs-code
data:
  unattend.xml: |
    <?xml version="1.0" encoding="utf-8"?>
    <unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
      <settings pass="specialize">
        <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <InputLocale>0409:00000409</InputLocale>
          <SystemLocale>en-US</SystemLocale>
          <UILanguage>en-US</UILanguage>
          <UserLocale>en-US</UserLocale>
        </component>
      </settings>
      <settings pass="oobeSystem">
        <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <Reseal>
            <Mode>Audit</Mode>
          </Reseal>
        </component>
      </settings>
      <settings pass="auditUser">
        <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <RunSynchronous>
            <RunSynchronousCommand wcm:action="add">
              <Order>1</Order>
              <Path>PowerShell -ExecutionPolicy Bypass -NoProfile D:\vsCode-install.ps1</Path>
              <Description>Run VS Code-install script</Description>
            </RunSynchronousCommand>
          </RunSynchronous>
          <Generalize>
            <ForceShutdownNow>true</ForceShutdownNow>
            <Mode>OOBE</Mode>
          </Generalize>
        </component>
      </settings>
    </unattend>
  vsCode-install.ps1: |
    #https://github.com/kubevirt/user-guide/pull/645
    Set-NetIPInterface -InterfaceIndex $(Get-NetAdapter).ifIndex -NlMtuBytes 1300

    # Download VS Code
    $url = "https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user"
    $setupPath = "C:\VSCodeUserSetup-x64.exe"
    Invoke-WebRequest -Uri $url -OutFile $setupPath

    # vs code
    Start-Process $setupPath -Wait -ArgumentList "/ACTION=INSTALL /VERYSILENT /MERGETASKS=!runcode"

    # Rename cached unattend.xml to avoid it is picked up by sysprep
    mv C:\Windows\Panther\unattend.xml C:\Windows\Panther\unattend.visualStudio.xml

    # Eject CD, to avoid that the unattend.xml on the CD is picked up by sysprep
    (New-Object -COMObject Shell.Application).NameSpace(17).ParseName("D:").InvokeVerb("Eject")
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: windows10-unattend
data:
  unattend.xml: |
    <?xml version="1.0" encoding="utf-8"?>
    <unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
      <settings pass="specialize">
        <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <InputLocale>0409:00000409</InputLocale>
          <SystemLocale>en-US</SystemLocale>
          <UILanguage>en-US</UILanguage>
          <UserLocale>en-US</UserLocale>
        </component>
        <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <ExtendOSPartition>
            <Extend>true</Extend>
          </ExtendOSPartition>
        </component>
        <component name="Microsoft-Windows-Security-SPP-UX" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <SkipAutoActivation>true</SkipAutoActivation>
        </component>
        <component name="Microsoft-Windows-SQMApi" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <CEIPEnabled>0</CEIPEnabled>
        </component>
      </settings>
      <settings pass="oobeSystem">
        <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <InputLocale>0409:00000409</InputLocale>
          <SystemLocale>en-US</SystemLocale>
          <UILanguage>en-US</UILanguage>
          <UserLocale>en-US</UserLocale>
        </component>
        <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <OOBE>
            <HideEULAPage>true</HideEULAPage>
            <HideLocalAccountScreen>true</HideLocalAccountScreen>
            <HideOnlineAccountScreens>true</HideOnlineAccountScreens>
            <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
            <ProtectYourPC>3</ProtectYourPC>
            <NetworkLocation>Other</NetworkLocation>
          </OOBE>
          <TimeZone>UTC</TimeZone>
          <UserAccounts>
            <AdministratorPassword>
              <Value>password</Value>
              <PlainText>true</PlainText>
            </AdministratorPassword>
          </UserAccounts>
          <AutoLogon>
            <Password>
              <Value>password</Value>
              <PlainText>true</PlainText>
            </Password>
            <Username>Administrator</Username>
            <Enabled>true</Enabled>
            <LogonCount>1</LogonCount>
          </AutoLogon>
          <FirstLogonCommands>
            <SynchronousCommand wcm:action="add">
              <CommandLine>reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v AutoLogonCount /t REG_DWORD /d 0 /f</CommandLine>
              <RequiresUserInput>false</RequiresUserInput>
              <Order>1</Order>
              <Description>Set AutoLogonCount to 0</Description>
            </SynchronousCommand>
          </FirstLogonCommands>
        </component>
      </settings>
    </unattend>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: windows11-unattend
data:
  unattend.xml: |
    <?xml version="1.0" encoding="utf-8"?>
    <unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
      <settings pass="specialize">
        <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <InputLocale>0409:00000409</InputLocale>
          <SystemLocale>en-US</SystemLocale>
          <UILanguage>en-US</UILanguage>
          <UserLocale>en-US</UserLocale>
        </component>
        <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <ExtendOSPartition>
            <Extend>true</Extend>
          </ExtendOSPartition>
        </component>
        <component name="Microsoft-Windows-Security-SPP-UX" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <SkipAutoActivation>true</SkipAutoActivation>
        </component>
        <component name="Microsoft-Windows-SQMApi" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <CEIPEnabled>0</CEIPEnabled>
        </component>
      </settings>
      <settings pass="oobeSystem">
        <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <InputLocale>0409:00000409</InputLocale>
          <SystemLocale>en-US</SystemLocale>
          <UILanguage>en-US</UILanguage>
          <UserLocale>en-US</UserLocale>
        </component>
        <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <OOBE>
            <HideEULAPage>true</HideEULAPage>
            <HideLocalAccountScreen>true</HideLocalAccountScreen>
            <HideOnlineAccountScreens>true</HideOnlineAccountScreens>
            <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
            <ProtectYourPC>3</ProtectYourPC>
            <NetworkLocation>Other</NetworkLocation>
          </OOBE>
          <TimeZone>UTC</TimeZone>
          <UserAccounts>
            <AdministratorPassword>
              <Value>password</Value>
              <PlainText>true</PlainText>
            </AdministratorPassword>
          </UserAccounts>
          <AutoLogon>
            <Password>
              <Value>password</Value>
              <PlainText>true</PlainText>
            </Password>
            <Username>Administrator</Username>
            <Enabled>true</Enabled>
            <LogonCount>1</LogonCount>
          </AutoLogon>
          <FirstLogonCommands>
            <SynchronousCommand wcm:action="add">
              <CommandLine>reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v AutoLogonCount /t REG_DWORD /d 0 /f</CommandLine>
              <RequiresUserInput>false</RequiresUserInput>
              <Order>1</Order>
              <Description>Set AutoLogonCount to 0</Description>
            </SynchronousCommand>
          </FirstLogonCommands>
        </component>
      </settings>
    </unattend>
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: windows-pipelines
rules:
  - verbs:
      - create
    apiGroups:
      - ""
    resources:
      - pods
  - verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
    apiGroups:
      - template.openshift.io
    resources:
      - templates
  - verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
    apiGroups:
      - kubevirt.io
    resources:
      - virtualmachines
      - virtualmachineinstances
  - verbs:
      - create
    apiGroups:
      - template.openshift.io
    resources:
      - processedtemplates
  - verbs:
      - 'get'
      - 'delete'
      - 'create'
    apiGroups:
      - ''
    resources:
      - persistentvolumeclaims
  - verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
    apiGroups:
      - cdi.kubevirt.io
    resources:
      - datavolumes
  - verbs:
      - update
    apiGroups:
      - subresources.kubevirt.io
    resources:
      - virtualmachines/start
      - virtualmachines/stop
      - virtualmachines/restart
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: windows-pipelines
roleRef:
  kind: Role
  name: windows-pipelines
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: pipeline
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: windows-bios-installer
spec:
  params:
    - name: winImageDownloadURL
      description: Download URL to Windows installation ISO (English United States x64 version is needed). You can follow e.g. https://www.microsoft.com/en-us/software-download/windows10ISO to get windows 10 iso.
      type: string
    - name: autounattendConfigMapName
      description: Name of the ConfigMap containing the sysprep configuration files (autounattend.xml, etc.).
      type: string
      default: windows10-bios-autounattend
    - name: virtioContainerDiskName
      description: Reference to the containerdisk containing the virtio-win drivers ISO.
      type: string
      default: quay.io/kubevirt/virtio-container-disk:latest
    - name: sourceTemplateName
      description: Name of the Template which is used to create the installer Template.
      type: string
      default: windows10-desktop-large
    - name: sourceTemplateNamespace
      description: Namespace of the Template which is used to create the installer Template.
      type: string
      default: openshift
    - name: installerTemplateName
      description: Name of the installer Template which is created. A VM created from this template is used to install Windows 10.
      type: string
      default: windows10-desktop-large-installer
    - name: allowReplaceInstallerTemplate
      description: Allow to replace an already existing installer Template.
      type: string
      default: "false"
    - name: baseDvName
      description: Name of the base DataVolume which is created. Pre-installed Windows VMs can be created from this DataVolume.
      type: string
      default: win10
    - name: baseDvNamespace
      description: Namespace of the base DataVolume which is created.
      type: string
      default: kubevirt-os-images
  tasks:
    - name: copy-template
      params:
        - name: sourceTemplateName
          value: $(params.sourceTemplateName)
        - name: sourceTemplateNamespace
          value: $(params.sourceTemplateNamespace)
        - name: targetTemplateName
          value: $(params.installerTemplateName)
        - name: allowReplace
          value: $(params.allowReplaceInstallerTemplate)
      timeout: 10m
      taskRef:
        kind: Task
        name: copy-template
    - name: modify-vm-template
      params:
        - name: templateName
          value: $(tasks.copy-template.results.name)
        - name: templateAnnotations
          value:
            - "openshift.io/display-name: Microsoft Windows bios Installer VM"
            - "description: Template for installing Microsoft Windows."
        - name: deleteDatavolumeTemplate
          value: "true"
        - name: datavolumeTemplates
          value:
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}-installcdrom"
                },
                "spec": {
                  "storage": {
                    "resources": {
                      "requests": {
                        "storage": "7Gi"
                      }
                    }
                  },
                  "source": {
                    "http": {
                      "url": "$(params.winImageDownloadURL)"
                    }
                  }
                }
              }
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}-rootdisk"
                },
                "spec": {
                  "storage": {
                    "resources": {
                      "requests": {
                        "storage": "20Gi"
                      }
                    }
                  },
                  "source": {
                    "blank": {}
                  }
                }
              }
        - name: deleteDisks
          value: "true"
        - name: disks
          value:
            - '{"name": "installcdrom", "cdrom": {"bus": "sata"}, "bootOrder": 1}'
            - '{"name": "rootdisk", "disk": {"bus": "virtio"}, "bootOrder": 2}'
            - '{"name": "virtiocontainerdisk", "cdrom": {"bus": "sata"}}'
            - '{"name": "sysprep", "cdrom": {"bus": "sata"}}'
        - name: deleteVolumes
          value: "true"
        - name: volumes
          value:
            - '{"name": "installcdrom", "dataVolume": {"name": "${NAME}-installcdrom"}}'
            - '{"name": "rootdisk", "dataVolume": {"name": "${NAME}-rootdisk"}}'
            - '{"name": "virtiocontainerdisk", "containerDisk": {"image": "$(params.virtioContainerDiskName)"}}'
            - '{"name": "sysprep", "sysprep": {"configMap": {"name": "$(params.autounattendConfigMapName)"}}}'
        - name: deleteTemplateParameters
          value: "true"
        - name: templateParameters
          value:
            - '{"name": "NAME", "description": "VM name", "generate": "expression", "from": "windows-[a-z0-9]{6}"}'
      runAfter:
        - copy-template
      timeout: 10m
      taskRef:
        kind: Task
        name: modify-vm-template
    - name: create-vm-from-template
      params:
        - name: templateName
          value: $(tasks.modify-vm-template.results.name)
        - name: runStrategy
          value: RerunOnFailure
        - name: startVM
          value: "true"
      runAfter:
        - modify-vm-template
      taskRef:
        kind: Task
        name: create-vm-from-template
    - name: wait-for-vmi-status
      params:
        - name: vmiName
          value: $(tasks.create-vm-from-template.results.name)
        - name: successCondition
          value: status.phase == Succeeded
        - name: failureCondition
          value: status.phase in (Failed, Unknown)
      runAfter:
        - create-vm-from-template
      timeout: 2h
      taskRef:
        kind: Task
        name: wait-for-vmi-status
    - name: create-base-dv
      params:
        - name: manifest
          value: |
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              name: $(params.baseDvName)
              namespace: $(params.baseDvNamespace)
              annotations:
                cdi.kubevirt.io/storage.bind.immediate.requested: "true"
            spec:
              storage: {}
              source:
                pvc:
                  name: $(tasks.create-vm-from-template.results.name)-rootdisk
                  namespace: $(tasks.create-vm-from-template.results.namespace)
        - name: waitForSuccess
          value: "true"
        - name: allowReplace
          value: "true"
      runAfter:
        - wait-for-vmi-status
      timeout: 1h
      taskRef:
        kind: Task
        name: modify-data-object
  finally:
    - name: cleanup-vm
      params:
        - name: vmName
          value: $(tasks.create-vm-from-template.results.name)
        - name: delete
          value: "true"
      timeout: 10m
      taskRef:
        kind: Task
        name: cleanup-vm
    - name: delete-template
      params:
        - name: templateName
          value: $(params.installerTemplateName)
        - name: templateNamespace
          value: $(tasks.modify-vm-template.results.namespace)
        - name: deleteTemplate
          value: "true"
      taskRef:
        kind: Task
        name: modify-vm-template
  results:
    - name: installerTemplateName
      description: Name of the created installer Template
      value: $(tasks.copy-template.results.name)
    - name: installerTemplateNamespace
      description: Namespace of the created installer Template
      value: $(tasks.copy-template.results.namespace)
    - name: baseDvName
      description: Name of the created base DataVolume
      value: $(tasks.create-base-dv.results.name)
    - name: baseDvNamespace
      description: Namespace of the created base DataVolume
      value: $(tasks.create-base-dv.results.namespace)
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: windows-customize
  annotations:
    description: windows-customize pipeline provides functionality for windows VMs to e.g. install sql server, or install VS Code into windows VM. This pipeline can be reused for customizing Windows 10 and 11.
spec:
  params:
    - name: sourceTemplateName
      description: Name of the Template which is used to customize Windows and create a golden Template. The default boot source of this template needs to be available.
      type: string
      default: windows10-desktop-large
    - name: sourceTemplateNamespace
      description: Namespace of the Template which is used to customize Windows and create a golden Template. The default boot source of this template needs to be available.
      type: string
      default: openshift
    - name: customizeConfigMapName
      description: Name of the ConfigMap containing the customization and sysprep configuration files (unattend.xml, etc.). For example windows10-sqlserver or windows11-vs-code. It is possible to provide customize ConfigMaps created by the user too.
      type: string
      default: windows-vs-code
    - name: customizeTemplateName
      description: Name of the customize Template which is created. A VM created from this template is used to customize Windows.
      type: string
      default: windows10-desktop-large-customize-vs-code
    - name: allowReplaceCustomizationTemplate
      description: Allow to replace an already existing customize Template.
      type: string
      default: "false"
    - name: goldenTemplateName
      description: Name of the golden Template which is created. Pre-installed Windows VMs can be created from this template.
      type: string
      default: windows10-desktop-large-golden-vs-code
    - name: allowReplaceGoldenTemplate
      description: Allow to replace an already existing golden Template.
      type: string
      default: "false"
  tasks:
    - name: copy-template-customize
      params:
        - name: sourceTemplateName
          value: $(params.sourceTemplateName)
        - name: sourceTemplateNamespace
          value: $(params.sourceTemplateNamespace)
        - name: targetTemplateName
          value: $(params.customizeTemplateName)
        - name: allowReplace
          value: $(params.allowReplaceCustomizationTemplate)
      timeout: 10m
      taskRef:
        kind: Task
        name: copy-template
    - name: modify-vm-template-customize
      params:
        - name: templateName
          value: $(tasks.copy-template-customize.results.name)
        - name: templateAnnotations
          value:
            - "openshift.io/display-name: Microsoft Windows Customize VM"
            - "description: Template for customizing Microsoft Windows."
        - name: deleteDatavolumeTemplate
          value: "true"
        - name: datavolumeTemplates
          value:
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}"
                },
                "spec": {
                  "storage": {},
                  "sourceRef": {
                    "kind": "DataSource",
                    "name": "${DATA_SOURCE_NAME}",
                    "namespace": "${DATA_SOURCE_NAMESPACE}"
                  }
                }
              }
        - name: disks
          value:
            - '{"name": "rootdisk", "disk": {"bus": "virtio"}}'
            - '{"name": "sysprep", "cdrom": {"bus": "sata"}}'
        - name: volumes
          value:
            - '{"name": "rootdisk", "dataVolume": {"name": "${NAME}"}}'
            - '{"name": "sysprep", "sysprep": {"configMap": {"name": "$(params.customizeConfigMapName)"}}}'
      runAfter:
        - copy-template-customize
      timeout: 10m
      taskRef:
        kind: Task
        name: modify-vm-template
    - name: create-vm-from-template
      params:
        - name: templateName
          value: $(tasks.modify-vm-template-customize.results.name)
        - name: runStrategy
          value: RerunOnFailure
        - name: startVM
          value: "true"
      runAfter:
        - modify-vm-template-customize
      timeout: 10m
      taskRef:
        kind: Task
        name: create-vm-from-template
    - name: wait-for-vmi-status
      params:
        - name: vmiName
          value: $(tasks.create-vm-from-template.results.name)
        - name: successCondition
          value: status.phase == Succeeded
        - name: failureCondition
          value: status.phase in (Failed, Unknown)
      runAfter:
        - create-vm-from-template
      timeout: 2h
      taskRef:
        kind: Task
        name: wait-for-vmi-status
    - name: create-base-dv
      params:
        - name: manifest
          value: |
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              generateName: windows-base-
              annotations:
                cdi.kubevirt.io/storage.bind.immediate.requested: \"true\"
                cdi.kubevirt.io/storage.deleteAfterCompletion: "false"
            spec:
              storage:
                resources:
                  requests:
                    storage: 20Gi
              source:
                pvc:
                  name: $(tasks.create-vm-from-template.results.name)
                  namespace: $(tasks.create-vm-from-template.results.namespace)
        - name: waitForSuccess
          value: "true"
      runAfter:
        - wait-for-vmi-status
      timeout: 1h
      taskRef:
        kind: Task
        name: modify-data-object
    - name: copy-template-golden
      params:
        - name: sourceTemplateName
          value: $(params.sourceTemplateName)
        - name: sourceTemplateNamespace
          value: $(params.sourceTemplateNamespace)
        - name: targetTemplateName
          value: $(params.goldenTemplateName)
        - name: allowReplace
          value: $(params.allowReplaceGoldenTemplate)
      runAfter:
        - create-base-dv
      timeout: 30m
      taskRef:
        kind: Task
        name: copy-template
    - name: modify-vm-template-golden
      params:
        - name: templateName
          value: $(tasks.copy-template-golden.results.name)
        - name: templateAnnotations
          value:
            - "openshift.io/display-name: Microsoft Windows Customized VM Golden"
            - "description: Template for creating customized Microsoft Windows VMs."
        - name: deleteDatavolumeTemplate
          value: "true"
        - name: datavolumeTemplates
          value:
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}"
                },
                "spec": {
                  "storage": {
                    "resources": {
                      "requests": {
                        "storage": "20Gi"
                      }
                    }
                  },
                  "source": {
                    "pvc": {
                      "name": "$(tasks.create-base-dv.results.name)",
                      "namespace": "$(tasks.create-base-dv.results.namespace)"
                    }
                  }
                }
              }
        - name: deleteDisks
          value: "true"
        - name: disks
          value:
            - '{"name": "rootdisk", "disk": {"bus": "virtio"}}'
        - name: deleteVolumes
          value: "true"
        - name: volumes
          value:
            - '{"name": "rootdisk", "dataVolume": {"name": "${NAME}"}}'
        - name: deleteTemplateParameters
          value: "true"
        - name: templateParameters
          value:
            - '{"name": "NAME", "description": "VM name", "generate": "expression", "from": "windows-[a-z0-9]{6}"}'
      runAfter:
        - copy-template-golden
      timeout: 10m
      taskRef:
        kind: Task
        name: modify-vm-template
  finally:
    - name: cleanup-vm
      params:
        - name: vmName
          value: $(tasks.create-vm-from-template.results.name)
        - name: delete
          value: "true"
      timeout: 10m
      taskRef:
        kind: Task
        name: cleanup-vm
    - name: delete-template-customize
      params:
        - name: templateName
          value: $(params.customizeTemplateName)
        - name: templateNamespace
          value: $(tasks.copy-template-customize.results.namespace)
        - name: deleteTemplate
          value: "true"
      taskRef:
        kind: Task
        name: modify-vm-template
  results:
    - name: baseDvName
      description: Name of the created base DataVolume
      value: $(tasks.create-base-dv.results.name)
    - name: baseDvNamespace
      description: Namespace of the created base DataVolume
      value: $(tasks.create-base-dv.results.namespace)
    - name: goldenTemplateName
      description: Name of the created golden Template
      value: $(tasks.copy-template-golden.results.name)
    - name: goldenTemplateNamespace
      description: Namespace of the created golden Template
      value: $(tasks.copy-template-golden.results.namespace)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: windows11-autounattend
data:
  autounattend.xml: |
    <?xml version="1.0" encoding="utf-8"?>
    <unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
      <settings pass="windowsPE">
        <component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <SetupUILanguage>
            <UILanguage>en-US</UILanguage>
          </SetupUILanguage>
          <InputLocale>0409:00000409</InputLocale>
          <SystemLocale>en-US</SystemLocale>
          <UILanguage>en-US</UILanguage>
          <UserLocale>en-US</UserLocale>
        </component>
        <component name="Microsoft-Windows-PnpCustomizationsWinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <DriverPaths>
            <PathAndCredentials wcm:action="add" wcm:keyValue="1">
              <Path>E:\viostor\w11\amd64</Path>
            </PathAndCredentials>
          </DriverPaths>
        </component>
        <component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <DiskConfiguration>
            <WillShowUI>Never</WillShowUI>
            <Disk wcm:action="add">
              <!-- https://foxpa.ws/win-10-11-unattended -->
              <!-- https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/configure-uefigpt-based-hard-drive-partitions?view=windows-11 -->
              <CreatePartitions>
                  <CreatePartition wcm:action="add">
                      <Order>1</Order>
                      <Type>Primary</Type>
                      <Size>300</Size>
                  </CreatePartition>
                  <CreatePartition wcm:action="add">
                      <Order>2</Order>
                      <Type>EFI</Type>
                      <Size>100</Size>
                  </CreatePartition>
                  <CreatePartition wcm:action="add">
                      <Order>3</Order>
                      <Type>MSR</Type>
                      <Size>128</Size>
                  </CreatePartition>
                  <CreatePartition wcm:action="add">
                      <Order>4</Order>
                      <Type>Primary</Type>
                      <Extend>true</Extend>
                  </CreatePartition>
              </CreatePartitions>
              <ModifyPartitions>
                <ModifyPartition wcm:action="add">
                    <Order>1</Order>
                    <PartitionID>1</PartitionID>
                    <Label>WINRE</Label>
                    <Format>NTFS</Format>
                    <!-- https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/microsoft-windows-setup-diskconfiguration-disk-modifypartitions-modifypartition-typeid -->
                    <TypeID>DE94BBA4-06D1-4D40-A16A-BFD50179D6AC</TypeID>
                </ModifyPartition>
                <ModifyPartition wcm:action="add">
                    <Order>2</Order>
                    <PartitionID>2</PartitionID>
                    <Label>EFI</Label>
                    <Format>FAT32</Format>
                </ModifyPartition>
                <ModifyPartition wcm:action="add">
                    <Order>3</Order>
                    <PartitionID>3</PartitionID>
                </ModifyPartition>
                <ModifyPartition wcm:action="add">
                    <Order>4</Order>
                    <PartitionID>4</PartitionID>
                    <Label>Windows</Label>
                    <Letter>C</Letter>
                    <Format>NTFS</Format>
                </ModifyPartition>
              </ModifyPartitions>
              <DiskID>0</DiskID>
              <WillWipeDisk>true</WillWipeDisk>
            </Disk>
          </DiskConfiguration>
          <ImageInstall>
            <OSImage>
              <InstallFrom>
                <MetaData wcm:action="add">
                  <Key>/Image/Description</Key>
                  <Value>Windows 11 Pro</Value>
                </MetaData>
              </InstallFrom>
              <InstallTo>
                <DiskID>0</DiskID>
                <PartitionID>4</PartitionID>
              </InstallTo>
            </OSImage>
          </ImageInstall>
          <UserData>
            <AcceptEula>true</AcceptEula>
            <ProductKey>
              <Key/>
            </ProductKey>
          </UserData>
        </component>
      </settings>
      <settings pass="specialize">
        <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <InputLocale>0409:00000409</InputLocale>
          <SystemLocale>en-US</SystemLocale>
          <UILanguage>en-US</UILanguage>
          <UserLocale>en-US</UserLocale>
        </component>
      </settings>
      <settings pass="oobeSystem">
        <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <Reseal>
            <Mode>Audit</Mode>
          </Reseal>
        </component>
      </settings>
      <settings pass="auditUser">
        <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
          <RunSynchronous>
            <RunSynchronousCommand wcm:action="add">
              <Order>1</Order>
              <Path>PowerShell -ExecutionPolicy Bypass -NoProfile F:\post-install.ps1</Path>
              <Description>Run post-install script</Description>
            </RunSynchronousCommand>
          </RunSynchronous>
          <Generalize>
            <ForceShutdownNow>true</ForceShutdownNow>
            <Mode>OOBE</Mode>
          </Generalize>
        </component>
      </settings>
    </unattend>
  post-install.ps1: |
    # Install virtio guest drivers
    # ADDLOCAL is specified to workaround a bug in virtio-win-0.1.217.iso
    # See:
    #   - https://github.com/virtio-win/virtio-win-guest-tools-installer/issues/33
    #   - https://github.com/virtio-win/virtio-win-pkg-scripts/issues/60
    Start-Process msiexec -Wait -ArgumentList "/i E:\virtio-win-gt-x64.msi /qn /passive /norestart ADDLOCAL=FE_balloon_driver,FE_network_driver,FE_vioinput_driver,FE_viorng_driver,FE_vioscsi_driver,FE_vioserial_driver,FE_viostor_driver,FE_viofs_driver,FE_viogpudo_driver"

    # Install qemu guest agent
    Start-Process msiexec -Wait -ArgumentList "/i E:\guest-agent\qemu-ga-x86_64.msi /qn /passive /norestart"

    # Rename cached unattend.xml to avoid it is picked up by sysprep
    mv C:\Windows\Panther\unattend.xml C:\Windows\Panther\unattend.install.xml

    # Eject CD, to avoid that the unattend.xml on the CD is picked up by sysprep
    (New-Object -COMObject Shell.Application).NameSpace(17).ParseName("F:").InvokeVerb("Eject")
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: windows2k22-autounattend
data:
  autounattend.xml: |
    <?xml version="1.0" encoding="utf-8"?>
    <unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
        <servicing>
            <package action="configure">
                <assemblyIdentity name="Microsoft-Windows-ServerDatacenterEvalEdition" version="10.0.20348.587" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="" />
            </package>
        </servicing>
        <settings pass="windowsPE">
            <component language="neutral" name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <SetupUILanguage>
                    <UILanguage>en-US</UILanguage>
                </SetupUILanguage>
                <InputLocale>en-US</InputLocale>
                <SystemLocale>en-US</SystemLocale>
                <UILanguage>en-US</UILanguage>
                <UILanguageFallback>en-US</UILanguageFallback>
                <UserLocale>en-US</UserLocale>
            </component>
            <component language="neutral" name="Microsoft-Windows-PnpCustomizationsWinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <DriverPaths>
                    <PathAndCredentials wcm:action="add" wcm:keyValue="1">
                        <Path>E:\amd64\2k22\</Path>
                    </PathAndCredentials>
                </DriverPaths>
            </component>
            <component language="neutral" name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <DiskConfiguration>
                    <Disk wcm:action="add">
                        <CreatePartitions>
                            <CreatePartition wcm:action="add">
                                <Order>1</Order>
                                <Type>Primary</Type>
                                <Size>300</Size>
                            </CreatePartition>
                            <CreatePartition wcm:action="add">
                                <Order>2</Order>
                                <Type>EFI</Type>
                                <Size>100</Size>
                            </CreatePartition>
                            <CreatePartition wcm:action="add">
                                <Order>3</Order>
                                <Type>MSR</Type>
                                <Size>128</Size>
                            </CreatePartition>
                            <CreatePartition wcm:action="add">
                                <Order>4</Order>
                                <Type>Primary</Type>
                                <Extend>true</Extend>
                            </CreatePartition>
                        </CreatePartitions>
                        <ModifyPartitions>
                            <ModifyPartition wcm:action="add">
                                <Order>1</Order>
                                <PartitionID>1</PartitionID>
                                <Label>WINRE</Label>
                                <Format>NTFS</Format>
                                <TypeID>DE94BBA4-06D1-4D40-A16A-BFD50179D6AC</TypeID>
                            </ModifyPartition>
                            <ModifyPartition wcm:action="add">
                                <Order>2</Order>
                                <PartitionID>2</PartitionID>
                                <Label>EFI</Label>
                                <Format>FAT32</Format>
                            </ModifyPartition>
                            <ModifyPartition wcm:action="add">
                                <Order>3</Order>
                                <PartitionID>3</PartitionID>
                            </ModifyPartition>
                            <ModifyPartition wcm:action="add">
                                <Order>4</Order>
                                <PartitionID>4</PartitionID>
                                <Label>Windows</Label>
                                <Letter>C</Letter>
                                <Format>NTFS</Format>
                            </ModifyPartition>
                        </ModifyPartitions>
                        <DiskID>0</DiskID>
                        <WillWipeDisk>true</WillWipeDisk>
                    </Disk>
                </DiskConfiguration>
                <ImageInstall>
                    <OSImage>
                        <InstallFrom>
                            <MetaData wcm:action="add">
                                <Key>/IMAGE/NAME</Key>
                                <Value>Windows Server 2022 SERVERDATACENTER</Value>
                            </MetaData>
                        </InstallFrom>
                        <InstallTo>
                            <DiskID>0</DiskID>
                            <PartitionID>4</PartitionID>
                        </InstallTo>
                    </OSImage>
                </ImageInstall>
                <UserData>
                    <AcceptEula>true</AcceptEula>
                    <FullName>AdminAccount</FullName>
                    <Organization>OrgName</Organization>
                </UserData>
            </component>
        </settings>
        <settings pass="specialize">
            <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
                <InputLocale>0409:00000409</InputLocale>
                <SystemLocale>en-US</SystemLocale>
                <UILanguage>en-US</UILanguage>
                <UserLocale>en-US</UserLocale>
            </component>
        </settings>
        <settings pass="oobeSystem">
            <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
                <Reseal>
                    <Mode>Audit</Mode>
                </Reseal>
            </component>
        </settings>
        <settings pass="auditUser">
            <component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
                <RunSynchronous>
                    <RunSynchronousCommand wcm:action="add">
                        <Order>1</Order>
                        <Path>PowerShell -ExecutionPolicy Bypass -NoProfile F:\post-install.ps1</Path>
                        <Description>Run post-install script</Description>
                    </RunSynchronousCommand>
                </RunSynchronous>
                <Generalize>
                    <ForceShutdownNow>true</ForceShutdownNow>
                    <Mode>OOBE</Mode>
                </Generalize>
            </component>
        </settings>
    </unattend>
  post-install.ps1: |
    # Install virtio guest drivers
    # ADDLOCAL is specified to workaround a bug in virtio-win-0.1.217.iso
    # See:
    #   - https://github.com/virtio-win/virtio-win-guest-tools-installer/issues/33
    #   - https://github.com/virtio-win/virtio-win-pkg-scripts/issues/60
    Start-Process msiexec -Wait -ArgumentList "/i E:\virtio-win-gt-x64.msi /qn /passive /norestart ADDLOCAL=FE_balloon_driver,FE_network_driver,FE_vioinput_driver,FE_viorng_driver,FE_vioscsi_driver,FE_vioserial_driver,FE_viostor_driver,FE_viofs_driver,FE_viogpudo_driver"

    # Install qemu guest agent
    Start-Process msiexec -Wait -ArgumentList "/i E:\guest-agent\qemu-ga-x86_64.msi /qn /passive /norestart"

    # Rename cached unattend.xml to avoid it is picked up by sysprep
    mv C:\Windows\Panther\unattend.xml C:\Windows\Panther\unattend.install.xml

    # Eject CD, to avoid that the unattend.xml on the CD is picked up by sysprep
    (New-Object -COMObject Shell.Application).NameSpace(17).ParseName("F:").InvokeVerb("Eject")
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: windows-efi-installer
spec:
  finally:
    - name: cleanup-vm
      params:
        - name: vmName
          value: $(tasks.create-vm-from-template.results.name)
        - name: delete
          value: "true"
      taskRef:
        kind: Task
        name: cleanup-vm
      timeout: 10m0s
    - name: delete-template
      params:
        - name: templateName
          value: $(params.installerTemplateName)
        - name: templateNamespace
          value: $(tasks.modify-vm-template.results.namespace)
        - name: deleteTemplate
          value: "true"
      taskRef:
        kind: Task
        name: modify-vm-template
    - name: delete-imported-iso
      params:
        - name: deleteObject
          value: "true"
        - name: deleteObjectKind
          value: "PersistentVolumeClaim"
        - name: deleteObjectName
          value: "$(tasks.import-win-iso.results.name)"
        - name: namespace
          value: "$(tasks.import-win-iso.results.namespace)"
      taskRef:
        kind: Task
        name: modify-data-object
  params:
    - description: Download URL to Windows 11 or server 2022 installation ISO (English United States x64 version is needed). You can follow https://www.microsoft.com/en-us/software-download/windows11 or https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2022 to get one.
      name: winImageDownloadURL
      type: string
    - default: windows11-autounattend
      description: Name of the ConfigMap containing the sysprep configuration files (autounattend.xml, etc.). For example windows11-autounattend or windows2022-autounattend. It is possible to provide customize ConfigMaps created by the user too.
      name: autounattendConfigMapName
      type: string
    - default: quay.io/kubevirt/virtio-container-disk:v0.59.0-rc.0
      description: Reference to the containerdisk containing the virtio-win drivers ISO.
      name: virtioContainerDiskName
      type: string
    - default: windows11-desktop-large
      description: Name of the Template which is used to create the installer Template.
      name: sourceTemplateName
      type: string
    - default: openshift
      description: Namespace of the Template which is used to create the installer Template.
      name: sourceTemplateNamespace
      type: string
    - default: windows11-desktop-large-installer
      description: Name of the installer Template which is created. A VM created from this template is used to install Windows 11 or other Windows version.
      name: installerTemplateName
      type: string
    - default: "false"
      description: Allow to replace an already existing installer Template.
      name: allowReplaceInstallerTemplate
      type: string
    - default: win11
      description: Name of the base DataVolume which is created. Pre-installed Windows VMs can be created from this DataVolume.
      name: baseDvName
      type: string
    - default: kubevirt-os-images
      description: Namespace of the base DataVolume which is created.
      name: baseDvNamespace
      type: string
    - default: win11
      description: Name of Windows ISO datavolume
      name: isoDVName
      type: string
  results:
    - description: Name of the created installer Template
      name: installerTemplateName
      value: $(tasks.copy-template.results.name)
    - description: Namespace of the created installer Template
      name: installerTemplateNamespace
      value: $(tasks.copy-template.results.namespace)
    - description: Name of the created base DataVolume
      name: baseDvName
      value: $(tasks.create-base-dv.results.name)
    - description: Namespace of the created base DataVolume
      name: baseDvNamespace
      value: $(tasks.create-base-dv.results.namespace)
  tasks:
    - name: copy-template
      params:
        - name: sourceTemplateName
          value: $(params.sourceTemplateName)
        - name: sourceTemplateNamespace
          value: $(params.sourceTemplateNamespace)
        - name: targetTemplateName
          value: $(params.installerTemplateName)
        - name: allowReplace
          value: $(params.allowReplaceInstallerTemplate)
      taskRef:
        kind: Task
        name: copy-template
      timeout: 10m0s
    - name: modify-vm-template
      params:
        - name: templateName
          value: $(tasks.copy-template.results.name)
        - name: templateAnnotations
          value:
            - "openshift.io/display-name: Microsoft Windows Installer VM"
            - "description: Template for installing Microsoft Windows."
        - name: deleteDatavolumeTemplate
          value: "true"
        - name: datavolumeTemplates
          value:
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}-installcdrom"
                },
                "spec": {
                  "storage": {
                    "resources": {
                      "requests": {
                        "storage": "9Gi"
                      }
                    }
                  },
                  "source": {
                    "pvc": {
                      "name": "$(tasks.import-win-iso.results.name)",
                      "namespace": "$(tasks.import-win-iso.results.namespace)"
                    }
                  }
                }
              }
            - |
              {
                "apiVersion": "cdi.kubevirt.io/v1beta1",
                "kind": "DataVolume",
                "metadata": {
                    "name": "${NAME}-rootdisk"
                },
                "spec": {
                  "storage": {
                    "resources": {
                      "requests": {
                        "storage": "20Gi"
                      }
                    }
                  },
                  "source": {
                    "blank": {}
                  }
                }
              }
        - name: deleteDisks
          value: "true"
        - name: disks
          value:
            - '{"name": "installcdrom", "cdrom": {"bus": "sata"}, "bootOrder": 2}'
            - '{"name": "rootdisk", "disk": {"bus": "virtio"}, "bootOrder": 1}'
            - '{"name": "virtiocontainerdisk", "cdrom": {"bus": "sata"}}'
            - '{"name": "sysprep", "cdrom": {"bus": "sata"}}'
        - name: deleteVolumes
          value: "true"
        - name: volumes
          value:
            - '{"name": "installcdrom", "dataVolume": {"name": "${NAME}-installcdrom"}}'
            - '{"name": "rootdisk", "dataVolume": {"name": "${NAME}-rootdisk"}}'
            - '{"name": "virtiocontainerdisk", "containerDisk": {"image": "$(params.virtioContainerDiskName)"}}'
            - '{"name": "sysprep", "sysprep": {"configMap": {"name": "$(params.autounattendConfigMapName)"}}}'
        - name: deleteTemplateParameters
          value: "true"
        - name: templateParameters
          value:
            - '{"name": "NAME", "description": "VM name", "generate": "expression", "from": "windows-[a-z0-9]{6}"}'
      runAfter:
        - copy-template
        - modify-windows-iso-file
      taskRef:
        kind: Task
        name: modify-vm-template
      timeout: 10m0s
    - name: create-vm-from-template
      params:
        - name: templateName
          value: $(tasks.modify-vm-template.results.name)
        - name: runStrategy
          value: RerunOnFailure
        - name: startVM
          value: "true"
      runAfter:
        - modify-vm-template
      taskRef:
        kind: Task
        name: create-vm-from-template
    - name: wait-for-vmi-status
      params:
        - name: vmiName
          value: $(tasks.create-vm-from-template.results.name)
        - name: successCondition
          value: status.phase == Succeeded
        - name: failureCondition
          value: status.phase in (Failed, Unknown)
      runAfter:
        - create-vm-from-template
      taskRef:
        kind: Task
        name: wait-for-vmi-status
      timeout: 2h0m0s
    - name: create-base-dv
      params:
        - name: manifest
          value: |
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              name: $(params.baseDvName)
              namespace: $(params.baseDvNamespace)
              annotations:
                cdi.kubevirt.io/storage.bind.immediate.requested: "true"
            spec:
              storage: {}
              source:
                pvc:
                  name: $(tasks.create-vm-from-template.results.name)-rootdisk
                  namespace: $(tasks.create-vm-from-template.results.namespace)
        - name: waitForSuccess
          value: "true"
        - name: allowReplace
          value: "true"
      runAfter:
        - wait-for-vmi-status
      taskRef:
        kind: Task
        name: modify-data-object
      timeout: 1h0m0s
    - name: import-win-iso
      params:
        - name: manifest
          value: |-
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              annotations:
                cdi.kubevirt.io/storage.bind.immediate.requested: "true"
              generateName: "$(params.isoDVName)-"
            spec:
              source:
                http:
                  url: "$(params.winImageDownloadURL)"
              pvc:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 9Gi
        - name: waitForSuccess
          value: "true"
        - name: deleteObject
          value: "false"
      taskRef:
        kind: Task
        name: modify-data-object
    - name: modify-windows-iso-file
      params:
        - name: pvcName
          value: $(tasks.import-win-iso.results.name)
      runAfter:
        - import-win-iso
      taskRef:
        kind: Task
        name: modify-windows-iso-file
